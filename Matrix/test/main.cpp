/*
Необходимо разработать классы для работы с вещественными числами, векторами
(строками размерности 1xN и столбцами размерности Nx1) и матрицами размерности
MxN и реализовать операции над ними: 1) обращение по индексам к элементам,
извлечение диагонали, строки или столбца - 1б (после модификации исходной
матрицы извлечённые элементы меняться не должны); 2) возможность создания
матрицы из векторов или чисел, вектора из чисел - 1б; 3) поэлементное
сложение/вычитание/умножение объектов одинаковой размерности - 1б; 4) умножение
числа на матрицу, вектора на матрицу, матрицы на вектор и матрицы на матрицу -
1б; 5) суммирование/вычитание числа и вектора/матрицы, матрицы и вектора (с
возможностью выбора - по строкам/по столбцам) - 1б; 6) получение
транспонированной и обратной матриц - 1б; 7) подсчёт определителя матрицы - 1б.

Все основные операции должны быть реализованы через перегрузку операторов
(операторы могут быть модифицирующие (+= и др.) и немодифицирующие (+ и др.)).

Доп. баллы:
- поддержка "слайсов, как в питоне" (на уровне методов, т.к. операторы такой
синтаксис не поддерживают). В качестве примерного интерфейса можно опираться на
то, как это сделано в " аналоге numpy на C++"
https://github.com/dpilger26/NumCpp -1б;
- размерность матриц может задаваться с помощью шаблонных параметров -2б;

Для сдачи необходимо развернуть базовый CI, в котором будут осуществляться
автоматическая сборка и тестирование проекта (хотя бы один интеграционный тест,
показывающий работоспособность всех реализованных пунктов). Без покрытия тестами
каждый пункт оценивается в 50% стоимости.
*/

#include <gmock/gmock.h>
#include <gtest/gtest.h>
#include <iostream>
#include <task1.hpp>

TEST(VectorTest, EmptyConstructorTest) {
  DoubleArray arr1;
  DoubleArray arr2(0);
  DoubleArray arr3 = arr1;
  EXPECT_EQ(arr1, arr2);
  EXPECT_EQ(arr2, arr3);
  EXPECT_EQ(arr3, arr1);
}

TEST(VectorTest, MassiveConstructorTest) {
  DoubleArray arr1 = {1.0, 2, 3, 4, 5, 6};
  DoubleArray arr2(6);
  DoubleArray arr3 = arr1;
  EXPECT_EQ(arr1.size(), arr2.size());
  EXPECT_EQ(arr2.size(), arr3.size());
  EXPECT_EQ(arr3, arr1);
}

TEST(VectorTest, SetGetTest) {
  DoubleArray arr1 = {1.0, 2, 3, 4, 5, 6};
  DoubleArray arr2 = {1.0, 2, 9, 4, 5, 6};
  DoubleArray arr3 = {1.0, 2, 5, 4, 5, 6};
  arr1[2] = 9;
  EXPECT_EQ(arr1[2], 9);
  EXPECT_EQ(arr1, arr2);
  EXPECT_EQ(arr1[2] - 4, arr3[2]);
}

TEST(VectorTest, AddTest) {
  DoubleArray arr1 = {1.0, 2, 3, 4, 5, 6};
  DoubleArray arr2 = {10.0, 20, 30, 40, 50, 60};
  DoubleArray arr3 = {11.0, 22, 33, 44, 55, 66};
  DoubleArray arr4(6);
  arr4 = arr1 + arr2;
  EXPECT_EQ(arr3, arr4);
}

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
